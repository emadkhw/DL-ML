!pip install keras-tuner -q
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from kerastuner.tuners import RandomSearch
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau

df = pd.read_csv("adult.csv")
df

df.info()
df.describe()
df.dtypes
df.isnull().sum()
df.columns

#One-Hot Encoding (Categorical Data)
categorical_cols = ['workclass', 'education', 'marital-status', 'occupation', 'relationship', 'race', 'gender', 'native-country']
df = pd.get_dummies(df, columns=categorical_cols)
df

#Label Encoding
label_encoder = LabelEncoder()
df['income'] = label_encoder.fit_transform(df['income'])
df

#تقسيم البيانات إلى مجموعات التدريب، التحقق، والاختبار
X = df.drop('income', axis=1)
y = df['income']
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Step 2: Machine Learning Models

# Random Forest
# توحيد البيانات
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.transform(X_test)

# تدريب نموذج Random Forest على البيانات الموحدة
rf = RandomForestClassifier(random_state=42)
rf.fit(X_train_scaled, y_train)

# توقع القيم باستخدام البيانات الموحدة
rf_preds = rf.predict(X_test_scaled)
rf_probs = rf.predict_proba(X_test_scaled)[:, 1]

# حساب المقاييس
print("Accuracy:", accuracy_score(y_test, rf_preds))
print("Precision:", precision_score(y_test, rf_preds))
print("Recall:", recall_score(y_test, rf_preds))
print("F1 Score:", f1_score(y_test, rf_preds))
print("AUC-ROC:", roc_auc_score(y_test, rf_probs))

# Logistic Regression
lr = LogisticRegression(max_iter=1000, random_state=42)
lr.fit(X_train, y_train)
lr_preds = lr.predict(X_test)
rf_preds = rf.predict(X_test)
rf_probs = rf.predict_proba(X_test)[:, 1]

# طباعة المقاييس
print("Accuracy:", accuracy_score(y_test, rf_preds))
print("Precision:", precision_score(y_test, rf_preds))
print("Recall:", recall_score(y_test, rf_preds))
print("F1 Score:", f1_score(y_test, rf_preds))
print("AUC-ROC:", roc_auc_score(y_test, rf_probs))

# Step 3: Neural Network with Keras
# بناء نموذج الشبكة العصبية
nn = Sequential([
    Dense(64, input_dim=X_train_scaled.shape[1], activation='relu'),  # طبقة الإدخال + المخفية الأولى
    Dropout(0.3),  # تقليل التجاوز باستخدام Dropout
    Dense(32, activation='relu'),  # طبقة مخفية ثانية
    Dense(1, activation='sigmoid')  # طبقة الإخراج (Sigmoid للتصنيف الثنائي)
])

# إعداد النموذج
nn.compile(
    optimizer='adam',  # اختيار Adam كخوارزمية تحسين
    loss='binary_crossentropy',  # خسارة مخصصة للتصنيف الثنائي
    metrics=['accuracy']  # قياس الأداء باستخدام الدقة
)

# إعداد callbacks لتحسين التدريب
callbacks = [
    EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True),  # إيقاف مبكر عند عدم تحسن الأداء
    ModelCheckpoint('best_model.keras', monitor='val_loss', save_best_only=True, mode='min'),  # حفظ أفضل نموذج, changed file extension to .keras
    ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=2, min_lr=1e-5)  # تقليل معدل التعلم ديناميكيًا
]

# تدريب النموذج
history = nn.fit(
    X_train_scaled,  # بيانات التدريب (بعد التطبيع)
    y_train,  # الهدف (income)
    validation_data=(X_val_scaled, y_val),  # مجموعة التحقق
    epochs=50,  # عدد الدورات
    batch_size=32,  # حجم الدفعة
    callbacks=callbacks  # تطبيق callbacks
)

# تقييم النموذج على مجموعة الاختبار
test_loss, test_accuracy = nn.evaluate(X_test_scaled, y_test)
print(f"Loss on test set: {test_loss}")
print(f"Accuracy on test set: {test_accuracy}")



# Step 4: Hyperparameter Tuning with Keras-Tuner
def build_model(hp):
    model = Sequential()
    model.add(Dense(hp.Int('units', min_value=32, max_value=128, step=16), activation='relu', input_dim=X_train_scaled.shape[1]))
    model.add(Dropout(hp.Float('dropout', min_value=0.1, max_value=0.5, step=0.1)))
    for _ in range(hp.Int('num_layers', 1, 3)):
        model.add(Dense(hp.Int('units', min_value=32, max_value=128, step=16), activation='relu'))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

tuner = RandomSearch(
    build_model,
    objective='val_accuracy',
    max_trials=5,
    executions_per_trial=3,
    directory='my_dir',
    project_name='NN_Tuning'
)

tuner.search(X_train_scaled, y_train, epochs=20, validation_data=(X_val_scaled, y_val))

# Best model and evaluation
best_hps = tuner.get_best_hyperparameters(num_trials=1)[0]
print(f"Best hyperparameters: {best_hps}")
